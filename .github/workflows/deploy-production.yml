name: Test and Deploy to Production

on:
  workflow_dispatch:  # Solo ejecuci√≥n manual hasta validar que funciona correctamente
  # push:
  #   branches:
  #     - main  # Deshabilitado temporalmente - habilitar despu√©s de validar

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mariadb:10.5.6
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: safebillpro_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP 7.4
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, json, bcmath, zip, soap
          coverage: none

      - name: Copy .env.testing
        run: |
          cp .env.example .env.testing
          sed -i 's/DB_DATABASE=.*/DB_DATABASE=safebillpro_test/' .env.testing
          sed -i 's/DB_USERNAME=.*/DB_USERNAME=root/' .env.testing
          sed -i 's/DB_PASSWORD=.*/DB_PASSWORD=root/' .env.testing
          sed -i 's/APP_ENV=.*/APP_ENV=testing/' .env.testing

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-interaction

      - name: Generate application key
        run: php artisan key:generate --env=testing

      - name: Run database migrations
        run: php artisan migrate --env=testing --force

      - name: Run PHPUnit tests
        run: vendor/bin/phpunit --testdox

  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    needs: test  # Solo se ejecuta si los tests pasan

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Obtiene todo el historial para mejor tracking

      - name: Setup Node.js 14
        uses: actions/setup-node@v3
        with:
          node-version: '14'
          cache: 'npm'

      - name: Setup PHP 7.4
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, json, bcmath, zip, soap
          coverage: none

      - name: Install Composer dependencies
        run: |
          composer install --prefer-dist --no-interaction --optimize-autoloader

      - name: Install NPM dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Compile assets for production
        run: npm run production

      - name: Create deployment artifact
        run: |
          mkdir -p deployment
          tar -czf deployment/release.tar.gz \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='node_modules' \
            --exclude='vendor' \
            --exclude='tests' \
            --exclude='.env' \
            --exclude='.env.example' \
            --exclude='storage/logs/*' \
            --exclude='storage/framework/cache/*' \
            --exclude='storage/framework/sessions/*' \
            --exclude='storage/framework/views/*' \
            --exclude='deployment' \
            .

      - name: Upload artifact to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          source: "deployment/release.tar.gz"
          target: "/tmp/"

      - name: Deploy on production server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            set -e

            echo "=========================================="
            echo "Starting deployment process..."
            echo "=========================================="

            # Variables
            DEPLOY_PATH="/var/www/safebill.dev/html"
            BACKUP_PATH="/var/www/backups/safebill"
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)

            # Crear directorio de backups si no existe
            mkdir -p $BACKUP_PATH

            # Backup del c√≥digo actual (solo archivos cr√≠ticos)
            echo "Creating backup..."
            cd $DEPLOY_PATH
            tar -czf $BACKUP_PATH/backup_$TIMESTAMP.tar.gz \
              --exclude='vendor' \
              --exclude='node_modules' \
              --exclude='storage/logs/*' \
              --exclude='storage/framework/cache/*' \
              --exclude='storage/framework/sessions/*' \
              --exclude='storage/framework/views/*' \
              --exclude='storage/app/tenancy/*/pdf/*' \
              --warning=no-file-changed \
              . || [ $? -eq 1 ]

            # Mantener solo los √∫ltimos 3 backups
            cd $BACKUP_PATH
            ls -t backup_*.tar.gz | tail -n +4 | xargs rm -f 2>/dev/null || true

            # Extraer el nuevo release
            echo "Extracting new release..."
            cd $DEPLOY_PATH
            tar -xzf /tmp/deployment/release.tar.gz
            rm /tmp/deployment/release.tar.gz

            # Restaurar el .env de producci√≥n (no viene en el release)
            # El .env ya debe existir en el servidor

            # Instalar dependencias de Composer en producci√≥n (vendor/ no viene en el artifact)
            # NOTA: Incluye dev dependencies porque DatabaseServiceProvider requiere Faker
            echo "Installing Composer dependencies..."
            cd $DEPLOY_PATH
            docker exec safebillpro-fpm composer install --prefer-dist --no-interaction --optimize-autoloader

            # Crear directorio temporal de mpdf y dar permisos
            echo "Creating mpdf temp directory..."
            mkdir -p vendor/mpdf/mpdf/tmp/mpdf
            chown -R www-data:www-data vendor/mpdf/mpdf/tmp
            chmod -R 775 vendor/mpdf/mpdf/tmp

            # Ajustar permisos
            echo "Setting permissions..."
            chown -R www-data:www-data $DEPLOY_PATH
            chmod -R 755 $DEPLOY_PATH
            chmod -R 775 $DEPLOY_PATH/storage
            chmod -R 775 $DEPLOY_PATH/bootstrap/cache

            # Limpiar cache de Laravel
            echo "Clearing Laravel cache..."
            docker exec safebillpro-fpm php artisan config:clear
            docker exec safebillpro-fpm php artisan cache:clear
            docker exec safebillpro-fpm php artisan view:clear
            docker exec safebillpro-fpm php artisan route:clear 2>/dev/null || true

            # Optimizar para producci√≥n
            echo "Optimizing application..."
            docker exec safebillpro-fpm php artisan config:cache
            docker exec safebillpro-fpm php artisan route:cache 2>/dev/null || true
            docker exec safebillpro-fpm php artisan view:cache 2>/dev/null || true

            # Ejecutar migraciones (con confirmaci√≥n autom√°tica)
            echo "Running database migrations..."
            docker exec safebillpro-fpm php artisan migrate --force

            # Ejecutar migraciones de tenants
            echo "Running tenant migrations..."
            docker exec safebillpro-fpm php artisan tenants:migrate --force

            # Reiniciar servicios (si usas queue workers o supervisor)
            echo "Restarting services..."
            docker exec safebillpro-supervisor supervisorctl restart all 2>/dev/null || echo "Supervisor not configured"

            # Reiniciar PHP-FPM
            echo "Restarting PHP-FPM..."
            docker exec safebillpro-fpm php-fpm reload 2>/dev/null || echo "PHP-FPM reloaded"

            echo "=========================================="
            echo "Deployment completed successfully!"
            echo "Backup saved at: $BACKUP_PATH/backup_$TIMESTAMP.tar.gz"
            echo "=========================================="

      - name: Health check and automatic rollback
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            echo "Waiting 10 seconds for services to restart..."
            sleep 10

            # Verificar que el sitio responda
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://safebill.dev || echo "000")

            if [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 400 ]; then
              echo "‚úÖ Health check passed! Site is responding with HTTP $HTTP_CODE"
            else
              echo "‚ö†Ô∏è Health check failed! Site returned HTTP $HTTP_CODE"
              echo "üîÑ Initiating automatic rollback..."

              BACKUP_PATH="/var/www/backups/safebill"
              DEPLOY_PATH="/var/www/safebill.dev/html"
              LATEST_BACKUP=$(ls -t $BACKUP_PATH/backup_*.tar.gz | head -1)

              if [ -n "$LATEST_BACKUP" ]; then
                echo "Rolling back to: $LATEST_BACKUP"
                cd $DEPLOY_PATH
                tar -xzf $LATEST_BACKUP
                docker exec safebillpro-fpm composer install --prefer-dist --no-interaction --optimize-autoloader
                docker exec safebillpro-fpm php artisan config:clear
                docker exec safebillpro-fpm php artisan cache:clear
                docker exec safebillpro-fpm php artisan view:clear
                echo "‚úÖ Rollback completed"
              else
                echo "‚ùå No backup found for rollback!"
              fi

              exit 1
            fi

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "üöÄ Deployment to production completed successfully!"
          else
            echo "‚ùå Deployment failed! Check logs above."
          fi
